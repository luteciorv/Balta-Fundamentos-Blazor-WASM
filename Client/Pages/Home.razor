@page "/"
@using BlazorWASM.Models
@using RestSharp;


<PageTitle>Categorias</PageTitle>

<h2>Categorias</h2>

@if (_categories is null)
{
    <p>Carregando dados da API</p>
}
else
{
    <table class="table shadow table-bordered">
        <thead>
            <tr>
                <th>Id</th>
                <td>Título</td>
                <td>Descrição</td>
                <td></td>
            </tr>
        </thead>

        <tbody>
            @foreach (var category in _categories)
            {
                <tr>
                    <td>@category.Id</td>
                    <td>@category.Title</td>
                    <td>@category.Description</td>
                    <td><button class="btn btn-info" @onclick="() => GetAsync(category.Id)">Editar</button></td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

<div>
    <div class="mb-3">
        <p>Dados da categoria</p>
    </div>

    <input type="hidden" @bind="_category.Id" />

    <div class="mb-3">
        <label class="form-label">Título</label>
        <input type="text" class="form-control" @bind="_category.Title" />
    </div>

    <div class="mb-3">
        <label class="form-label">Descrição</label>
        <input type="text" class="form-control" @bind="_category.Description" />
    </div>

    <div class="mb-3">
        <button class="btn btn-outline-primary" @onclick="UpsertAsync">Salvar</button>
        <button class="btn btn-outline-primary" @onclick="DeleteAsync">Ecluir</button>
    </div>
</div>

@code {
    private List<Category>? _categories = new();
    private Category? _category = new();

    protected override async Task OnInitializedAsync()
    {
        var client = new RestClient();
        var request = new RestRequest($"{Configuration.ApiUrl}/v1/categories");

        _categories = await client.GetAsync<List<Category>?>(request);
    }

    private async Task UpsertAsync()
    {
        var client = new RestClient();

        if(_category?.Id == 0)
        {
            var request = new RestRequest($"{Configuration.ApiUrl}/v1/categories")
                           .AddJsonBody(_category);

            var category = await client.PostAsync<Category>(request);

            if (category is not null) _categories?.Add(category);
        }
        else
        {
            var request = new RestRequest($"{Configuration.ApiUrl}/v1/categories/{_category?.Id}")
                           .AddJsonBody(_category);

            await client.PutAsync<Category>(request);

            var category = _categories?.FirstOrDefault(c => c.Id == _category?.Id);

            if(category is not null)
            {
                category.Title = _category.Title;
                category.Description = _category.Description;
            }
        }
    }

    private async Task GetAsync(int id)
    {
        var client = new RestClient();
        var request = new RestRequest($"{Configuration.ApiUrl}/v1/categories/{id}");

        _category = await client.GetAsync<Category?>(request);
    }

    private async Task DeleteAsync()
    {
        var client = new RestClient();
        var request = new RestRequest($"{Configuration.ApiUrl}/v1/categories/{_category?.Id}");

        await client.DeleteAsync(request);
    }
}